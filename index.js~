// utility pacakges
var _ = require('lodash')
	, bodyParser = require('body-parser')
	, shortId = require('shortid')
	, cookieParser = require('cookie-parser')
	, session = require('express-session')
	, passport = require('./auth')

// server setup
var config = require('./config')
var app = require('express')()
	, fixtures = require('./fixtures')
app.use(bodyParser.json())
app.use(cookieParser())
app.use(session({
	secret: 'keyboard cat',
	resave: false,
	saveUninitialized: true
}))
app.use(passport.initialize())
app.use(passport.session())

// TWEET ROUTES ==========

// get a user's tweets using query string parameter (QSP) userID
app.get('/api/tweets', function(req, res) {
	if (!req.query.userId)
		return res.sendStatus(400)

	var tweets = _.where(fixtures.tweets, { userId: req.query.userId })
	var sortedTweets = tweets.sort(function(t1, t2) {
		return t2.created - t1.created
	})

	res.send({ tweets: sortedTweets })
})

// post a tweet
app.post('/api/tweets', ensureAuthentication, function(req, res) {
	var tweet = req.body.tweet
	tweet.id = shortId.generate()
	tweet.created = Date.now() / 1000 | 0
	tweet.userId = req.user.id
	fixtures.tweets.push(tweet)

	res.send({ tweet: tweet })
})

// get tweet by id
app.get('/api/tweets/:tweetId', function(req, res) {
	var tweet = _.find(fixtures.tweets, 'id', req.params.tweetId)
	tweet ? res.send({ tweet: tweet }) : res.sendStatus(404)
})

// delete tweet by id
app.delete('/api/tweets/:tweetId', ensureAuthentication, function(req, res) {
	var tweet = _.find(fixtures.tweets, 'id', req.params.tweetId)
	if (!tweet) return res.sendStatus(404)
	if (tweet.userId !== req.user.id) return res.sendStatus(403)

	_.remove(fixtures.tweets, 'id', tweet.id)
	res.sendStatus(200)
})

// USER ROUTES ==========

// get a user by id
app.get('/api/users/:userId', function(req, res) {
	var user = _.find(fixtures.users, 'id', req.params.userId)
	user ? res.send({ user: user }) : res.sendStatus(404)
})

// add a user
app.post('/api/users', function(req, res) {
	var user = req.body.user
	if (_.find(fixtures.users, 'id', user.id))
		return res.sendStatus(409)

	user.followingIds = []
	fixtures.users.push(user)
	req.login(user, function(err) {
		err ? res.sendStatus(500) : res.sendStatus(200)
	})
})

// AUTHENTICATION ROUTES ==========

//login
app.post('/api/auth/login', function(req, res) {
	passport.authenticate('local', function(err, user, info) {
		if (err) return res.sendStatus(500)
		if (!user) return res.sendStatus(403)

		req.logIn(user, function(err) {
			err ? res.sendStatus(500) : res.send({ user: user })
		})
	})(req, res)
})

app.post('/api/auth/logout', function(req, res) {
	req.logout()
	res.sendStatus(200)
})

function ensureAuthentication(req, res, next) {
	if (!req.isAuthenticated()) return res.sendStatus(403)
	next()
}

module.exports = app.listen(config.get('server:port'), config.get('server:host'))
